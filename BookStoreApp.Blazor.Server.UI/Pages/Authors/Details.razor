@page "/authors/details/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navigationManager
<h3>Author Details</h3>

<EditForm Model="Author">
    <fieldset disabled="true">
        <div class="form-goup">
            <label for="firstname">First Name</label> - @Author.FirstName
            <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
            <ValidationMessage For="@(() => Author.FirstName)" />
        </div>
        <br />
        <div class="form-goup">
            <label for="lastname">First Name</label>
            <InputText @bind-Value="Author.LastName" class="form-control" id="lastname" />
            <ValidationMessage For="@(() => Author.LastName)" />
        </div>
        <br />
        <div class="form-goup">
            <label for="bio">Biography</label>
            <InputText @bind-Value="Author.Bio" class="form-control" id="bio" />
            <ValidationMessage For="@(() => Author.Bio)" />
        </div>
        <br />
    </fieldset>

    @if(Author.Books == null || Author.Books.Any() == false)
    {
        <div class="alert alert-dismissible alert-secondary">
            No books on this Author
        </div>
    }
    else
    {
        foreach(var b in Author.Books)
        {
            <div class="card" style="width: 18rem">
                <img src="@b.Image" class="card-img-top" alt="@b.Title">
                <div class="card-body">
                    <h5 class="card-title">@b.Title - @b.Price</h5>
                    <p class="card-text">@b.Price</p>
                    <a href="" class="btn btn-primary">View Book</a>
                </div>
            </div>
        }
    }

    <button @onclick="GotoEdit" class="btn btn-warning">
        Edit Author
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        Back To List
    </button>
</EditForm>

@code {
    private AuthorDetailsDto Author = new AuthorDetailsDto();
    public void HandleCreateAuthor()
    {
        
    }

    [Parameter]
    public int Id { get; set; }

    

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.GetAuthor(Id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private void BackToList()
    {
        navigationManager.NavigateTo("/authors/");
    }

    private void GotoEdit()
    {
        navigationManager.NavigateTo($"/authors/update/{Author.Id}");
    }
}
